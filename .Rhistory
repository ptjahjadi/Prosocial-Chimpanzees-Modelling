id3
data$id[1]
actor2 = c()
prosoc_left2 = c()
pulled_left2 = c()
condition2 = c()
actor3 = c()
prosoc_left3 = c()
pulled_left3 = c()
condition3 = c()
for (i in seq(1,504))
{
if(data$condition[i] == 0) {
actor2 = c(actor2, data$actor[i])
prosoc_left2 = c(prosoc_left2, data$prosoc_left[i])
pulled_left2 = c(pulled_left2, data$pulled_left[i])
condition2 = c(condition2, data$condition[i])
}
else {
actor3 = c(id3, data$actor[i])
prosoc_left3 = c(prosoc_left3, data$prosoc_left[i])
pulled_left3 = c(pulled_left3, data$pulled_left[i])
condition3 = c(condition3, data$condition[i])
}
}
rm(id2)
rm(id3)
actor2
actor3
# Separate the dataset by partner condition.
actor2 = c()
prosoc_left2 = c()
pulled_left2 = c()
condition2 = c()
actor3 = c()
prosoc_left3 = c()
pulled_left3 = c()
condition3 = c()
for (i in seq(1,504))
{
if(data$condition[i] == 0) {
actor2 = c(actor2, data$actor[i])
prosoc_left2 = c(prosoc_left2, data$prosoc_left[i])
pulled_left2 = c(pulled_left2, data$pulled_left[i])
condition2 = c(condition2, data$condition[i])
}
else {
actor3 = c(actor3, data$actor[i])
prosoc_left3 = c(prosoc_left3, data$prosoc_left[i])
pulled_left3 = c(pulled_left3, data$pulled_left[i])
condition3 = c(condition3, data$condition[i])
}
}
data
data_control = table(actor2, condition2, prosoc_left2, pulled_left2)
data_partner = table(actor3, condition3, prosoc_left3, pulled_left3)
data_control
data_control = table(factor(actor2, condition2, prosoc_left2, pulled_left2))
data_partner = table(factor(actor3, condition3, prosoc_left3, pulled_left3))
data_control = table(actor2, condition2, prosoc_left2, pulled_left2)
data_partner = table(actor3, condition3, prosoc_left3, pulled_left3)
View(data)
data_control = data.frame(actor2, condition2, prosoc_left2, pulled_left2)
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3)
data_control
prosocial = c()
for (i in seq(1,504))
{
if((data$prosoc_left[i] == data$pulled_left[i]) && data$condition[i] == 1)
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3, prosocial)
data_partner
rm(data_partner)
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3, prosocial)
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3)
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3)
prosocial = c()
for (i in seq(1,252))
{
if(data_partner$prosoc_left[i] == data_partner$pulled_left[i])
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
data_partner = data.frame(actor3, condition3, prosoc_left3, pulled_left3, prosocial)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ data_partner$prosoc_left + data_partner$actor
+ data_partner$condition + data_partner$prosoc_left, family = binomial)
summary(prosocial_model)
#Prosocial model
prosocial_model = glm((data_partner$prosocial ~ data_partner$prosoc_left + data_partner$actor
+ data_partner$condition + data_partner$prosoc_left)^2, family = binomial)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left + data_partner$actor
+ data_partner$condition + data_partner$prosoc_left)^2, family = binomial)
summary(prosocial_model)
data_partner
data_partner$prosoc_left
data_partner$prosoc_left3
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$prosoc_left3)^2, family = binomial)
summary(prosocial_model)
data_partner$prosocial
data_partner$ccondition3
data_partner$condition3
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$prosoc_left3)^2, family = binomial)
summary(prosocial_model)
prosocial_model2 = step(model, scope = ~.)
summary(prosocial_model2)
prosocial_model2 = step(prosocial_model, scope = ~.)
prosocial_model2 = step(prosocial_model, scope = ~.)
summary(prosocial_model2)
summary(prosocial_model)
prosocial_model2 = step(prosocial_model, scope = ~.)
summary(prosocial_model2)
with(data_partner, interaction.plot(data_partner$actor3, data_partner$condition3, data_partner$prosoc_left3, data_partner$pulled_left3))
library(faraway)
with(data_partner, interaction.plot(data_partner$actor3, data_partner$condition3, data_partner$prosoc_left3, data_partner$pulled_left3))
?interaction.plot
interaction.plot(data_partner)
with(data_partner, interaction.plot(data_partner$actor3, data_partner$condition3))
with(data_partner, interaction.plot(data_partner$actor3, data_partner$condition3, data_partner$prosoc_left3, data_partner$pulled_left3, data_partner$prosocial))
summary(prosocial_model2)
# Test for overdispersion
phihat = sum(residuals(prosocial_model2, type="pearson")^2 / 248)
phihat
# Test for GOF
pchisq(deviance(prosocial_model2), 248, lower.tail = FALSE)
anova(prosocial_model2)
plot(residuals(prosocial_model2))
plot(residuals(prosocial_model2) ~ predict(prosocial_model2, type="link"))
plot(residuals(prosocial_model2) ~ predict(prosocial_model2, type="link"), xlab=expression(hat(eta)), ylab = "Deviance residuals")
# Check residuals
plot(residuals(prosocial_model2) ~ predict(prosocial_model2, type="link"), xlab=expression(hat(eta)), ylab = "Deviance residuals")
View(wbca)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$pulled_left3)^2, family = binomial)
summary(prosocial_model)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$pulled_left3)^2, family = binomial, maxit = 100)
summary(prosocial_model)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$prosoc_left3)^2, family = binomial)
summary(prosocial_model)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$pulled_left3)^2, family = binomial)
summary(prosocial_model)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$pulled_left3), family = binomial)
summary(prosocial_model)
prosocial_model2 = step(prosocial_model, scope = ~.)
summary(prosocial_model2)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$condition3 + data_partner$pulled_left3)^2, family = binomial)
summary(prosocial_model)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3)^2, family = binomial)
summary(prosocial_model)
# Test for GOF
pchisq(deviance(prosocial_model2), 245, lower.tail = FALSE)
# Test for overdispersion
phihat = sum(residuals(prosocial_model2, type="pearson")^2 / 245)
phihat
# Check residuals
plot(residuals(prosocial_model2) ~ predict(prosocial_model2, type="link"), xlab=expression(hat(eta)), ylab = "Deviance residuals")
residuals(prosocialmodel2)
residuals(prosocial_model2)
res = residuals(prosocial_model2, type = "deviance")
plot(predict(prosocial_model2), res)
res
with(data_partner, interaction.plot(.))
with(data_partner, interaction.plot(prosocial_model))
View(prosocial_model)
prosocial_model
with(data_partner, interaction.plot(data_partner$prosoc_left3, data_partner$pulled_left3, data_partner$actor3, data_partner$condition3, data_partner$prosocial))
with(data_partner, interaction.plot(data_partner$prosoc_left3, data_partner$pulled_left3, data_partner$actor3, data_partner$condition3))
interaction.plot(data_partner$prosoc_left3, data_partner$actor3, data_partner$prosocial)
interaction.plot(data_partner$prosoc_left3, data_partner$actor3, data_partner$condition3, data_partner$pulled_left3, data_partner$prosocial)
interaction.plot(data_partner$prosoc_left3, data_partner$actor3, data_partner$pulled_left3, data_partner$prosocial)
interaction.plot(data_partner$actor3, data_partner$pulled_left3, data_partner$prosocial)
interaction.plot(data_partner$prosoc_left3, data_partner$actor3, data_partner$prosocial)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3)^2, family = binomial, link = logit)
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3)^2, family = binomial, link = "logit")
?glm
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3)^2, family = binomial(link = "probit"))
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3), family = binomial(link = "probit"))
summary(prosocial_model)
prosocial_model2 = step(prosocial_model, scope = ~.)
summary(prosocial_model2)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3)^2, family = binomial(link = "probit"))
summary(prosocial_model)
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3), family = binomial(link = "probit"))
summary(prosocial_model)
prosocial_model2 = step(prosocial_model, scope = ~.)
summary(prosocial_model2)
# Test for GOF
pchisq(deviance(prosocial_model2), 245, lower.tail = FALSE)
prosocial_model2 = step(prosocial_model, scope = ~.)
pchisq(deviance(prosocial_model2), 250, lower.tail = FALSE)
summary(prosocial_model2)
pchisq(deviance(prosocial_model2), 250, lower.tail = FALSE)
# Test for GOF
pchisq(deviance(prosocial_model2), 250, lower.tail = FALSE)
# Test for overdispersion
phihat = sum(residuals(prosocial_model2, type="pearson")^2 / 250)
phihat
# Check residuals
plot(residuals(prosocial_model2) ~ predict(prosocial_model2, type="link"), xlab=expression(hat(eta)), ylab = "Deviance residuals")
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, data$prosocial)
prosocial = c()
for i in seq(1, 504){
if(data_partner$prosoc_left[i] == data_partner$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, data$prosocial)
prosocial = c()
for (i in seq(1, 504)){
if(data_partner$prosoc_left[i] == data_partner$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, data$prosocial)
data
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data
prosocial = c()
for (i in seq(1, 504)){
if(dataprosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
prosocial = c()
for (i in seq(1, 504)){
if(data$prosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data$prosoc_left[i]
data$prosoc_left[1]
data$prosoc_left
data = read.table("assign2.txt", header = TRUE)
# Check prosociality of whole dataset
prosocial = c()
for (i in seq(1, 504)){
if(data$prosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data
# Check prosociality of whole dataset
prosocial = c()
for (i in seq(1, 504)){
if(data$prosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data
# Check prosociality of whole dataset
prosocial = c()
for (i in seq(1, 504)){
if(data.prosoc_left[i] == data.pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data$prosoc_left
data = read.table("assign2.txt", header = TRUE)
data
data$prosoc_left
data$pulled_left
data$prosoc_left[1]
data$prosoc_left[2]
data$prosoc_left[3]
prosocial = c()
for (i in seq(1, 504)){
if(data$prosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
prosocial
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data
data_control = data.frame(actor2, condition2, prosoc_left2, pulled_left2, c(seq(0,252)))
data_control = data.frame(actor2, condition2, prosoc_left2, pulled_left2, c(seq(0,251)))
data_control
data_control = data.frame(actor2, condition2, prosoc_left2, pulled_left2, c(rep(0,252)))
data_control
data = merge(data_control, data_partner)
data
data = read.table("assign2.txt", header = TRUE)
prosocial = c()
for (i in seq(1,504))
{
if((data$prosoc_left[i] == data$pulled_left[i]) && (data$condition == 1))
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data
prosocial
# Check prosociality of whole dataset
prosocial = c()
for (i in seq(1, 504)){
if(data$prosoc_left[i] == data$pulled_left[i]) {
prosocial = c(prosocial, 1)
}
else {
prosocial = c(prosocial, 0)
}
}
data$prosoc_left
data = read.table("assign2.txt", header = TRUE)
for (i in seq(1,504))
{
if((data$prosoc_left[i] == data$pulled_left[i]) && (data$condition == 1))
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
prosocial
data$prosoc_left
data
data$condition[192]
data$prosoc_left[192]
data$pulled_left[192]
#Is the chimpanzee being prosocial?
prosocial = c()
for (i in seq(1,504))
{
if((data$prosoc_left[i] == data$pulled_left[i]) && (data$condition[i] == 1))
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
data = data.frame(data$actor, data$condition, data$prosoc_left, data$pulled_left, prosocial)
data
full_model = glm(data$prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition), family = binomial(link = "probit"))
summary(full_model)
data
data$data.prosoc_left
full_model = glm(data$prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition), family = binomial(link = "probit"))
# GLM for data
full_model = glm(prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition), family = binomial(link = "probit"))
prosocial
full_model = glm(prosocial ~ (data$prosoc_left + data$actor + data$pulled_left + data$condition), family = binomial(link = "probit"))
data$data.actor
data$actor
data
data$prosocial
data$data.prosoc_left
data = read.table("assign2.txt", header = TRUE)
prosocial = c()
for (i in seq(1,504))
{
if((data$prosoc_left[i] == data$pulled_left[i]) && (data$condition[i] == 1))
{
prosocial = c(prosocial, 1)
}
else
{
prosocial = c(prosocial, 0)
}
}
actor = data$actor
condition = data$condition
prosoc_left = data$prosoc_left
pulled_left = data$pulled_left
data = data.frame(actor, condition, prosoc_left, pulled_left, prosocial)
data
# GLM for data
full_model = glm(prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition), family = binomial(link = "probit"))
summary(full_model)
prosocial_model2 = step(prosocial_model, scope = ~.)
prosocial_model = glm(data_partner$prosocial ~ ((data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3))^2, family = binomial(link = "probit"))
#Prosocial model
prosocial_model = glm(data_partner$prosocial ~ (data_partner$prosoc_left3 + data_partner$actor3
+ data_partner$pulled_left3), family = binomial(link = "probit"))
summary(prosocial_model)
# GLM for data
full_model = glm(prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition)^2, family = binomial(link = "probit"))
# GLM for data
full_model = glm(prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left + data$condition), family = binomial(link = "probit"))
full_model
full_model2 = step(full_model, scope = ~.)
summary(full_model2)
# GLM for data
full_model = glm(prosocial ~ (data$prosoc_left + data$actor
+ data$pulled_left), family = binomial(link = "probit"))
summary(full_model)
full_model2 = step(full_model, scope = ~.)
summary(full_model2)
summary(model2)
summary(prosocial_model2)
# Contingency Table
cta - xtabs(y ~ prosocial + prosoc_left3, data_partner)
# Contingency Table
cta = xtabs(y ~ prosocial + prosoc_left3, data_partner)
# Contingency Table
cta = xtabs(prosocial ~ pulled_left3 + prosoc_left3, data_partner)
cta
prosoc_left3
pulled_left3
ftable(Cta)
ftable(cta)
# Contingency Table
cta = xtabs(actor3 ~ pulled_left3 + prosoc_left3, data_partner)
cta
# Contingency Table
table(data_partner$pulled_left3, data_partner$prosocial_left3)
pulled_left3
prosocial_left3
# Contingency Table
table(data_partner$pulled_left3, data_partner$prosoc_left3)
# Contingency Table
prop.table(data_partner$pulled_left3, data_partner$prosoc_left3)
# Contingency Table
con_table = table(data_partner$pulled_left3, data_partner$prosoc_left3)
frac_con_table = prop.table(con_table)
frac_con_table
ftable(frac_con_table)
con_table
# Contingency Table
con_table = table(data_partner$pulled_left3, data_partner$prosoc_left3)
frac_con_table = prop.table(con_table)
frac_con_table
con_table = table(data_partner$pulled_left3, data_partner$prosoc_left3)
con_table
frac_con_table = prop.table(con_table)
frac_con_table
con_table = table(data_partner$pulled_left3, data_partner$prosoc_left3)
con_table
frac_con_table = prop.table(con_table)
frac_con_table
# Check for independence
chisq.test(data_partner$pulled_left3, data_partner$prosoc_left3)
# Check for independence
chisq.test(data_partner$prosoc_left3, data_partner$pulled_left3)
# Correlation test
library("ggpubr")
cor.test(data_partner$pulled_left3, data_partner$prosoc_left3,  method = "pearson")
